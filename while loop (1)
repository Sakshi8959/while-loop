{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a72268a-5fe2-472e-8c69-86d5181b1973",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "a= 1\n",
    "while a <=10 :\n",
    "   print(a)\n",
    "   a = a +1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9aab5d3c-4a05-479e-9a2b-027d450e037b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "7\n",
      "8\n",
      "9\n"
     ]
    }
   ],
   "source": [
    "l  = [1,2,3,5,4,6,4,7,4,8,4]\n",
    "for i in range(0,10):\n",
    "    print(i)\n",
    "    list(range(0,10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "06753305-dd50-43a2-ae41-3b9f6deb7aa6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "4\n",
      "6\n",
      "4\n",
      "7\n",
      "4\n",
      "8\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,10):\n",
    "   print(l[i])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9d0af669-98c6-408c-8b77-0af02f2dbba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum(l)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "0e006946-db12-4a70-9528-318c5388cb5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = 0\n",
    "for i in l:\n",
    "    result = result +i\n",
    "result\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "517635ca-8721-458b-92b8-8248c654fde1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your limits happy\n"
     ]
    }
   ],
   "source": [
    "n = int(input(\"enter your limits\"))\n",
    "starting_point = 0\n",
    "counter =1\n",
    "while counter <=n:\n",
    "    starting_point =starting_point + counter\n",
    "    counter  = counter +1\n",
    "starting_point"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b8fc2bcf-4631-4e5f-816e-1336b2c69c4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your number : 7\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "5040"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = int(input(\"enter your number :\"))\n",
    "factorial = 1\n",
    "while n>0:\n",
    "    factorial = factorial*n\n",
    "    n = n-1\n",
    "factorial    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "322a5184-45a4-494c-b613-d7254c077eb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter number 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "2\n",
      "4\n",
      "8\n",
      "16\n",
      "32\n",
      "64\n",
      "128\n",
      "256\n"
     ]
    }
   ],
   "source": [
    "number = int(input('enter number'))\n",
    "a , b = 0 , 1\n",
    "counter = 0\n",
    "while counter <number :\n",
    "    print(a)\n",
    "    \n",
    "    c = a+b\n",
    "    a =c\n",
    "    b =a\n",
    "    counter = counter +1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f240cade-de2a-4b9b-b75f-ad3a38d7664e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "a,b = 0,1\n",
    "for i in range(10):\n",
    "    print(a)\n",
    "    c= a+b\n",
    "    a=b\n",
    "    b = c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "178fb4d5-9219-4cb7-9d3a-5943fd3b843e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'yppah'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s = \"happy\"\n",
    "s[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b26c4299-9aa5-4d88-a4ae-b53f4f4548db",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your string for reversal happy\n"
     ]
    }
   ],
   "source": [
    "word = input(\"enter your string for reversal\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccf2d16c-dcc3-4c7a-bf51-035993ebdb56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter your string for reversal happy\n"
     ]
    }
   ],
   "source": [
    "word = input(\"enter your string for reversal\")\n",
    "reverse = \"\"\n",
    "length = len(word)\n",
    "while length>0:\n",
    "    reverse = reverse + word[length - 1]\n",
    "    lenght = length-1\n",
    "print(reverse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fc0d6412-a7d9-4c6b-a5b4-d33191c90b4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "word =input(\"enter your string for reversal\")\n",
    "reverse = \"\"\n",
    "length = len(word)-1\n",
    "while length>=0:\n",
    "    reverse = reverse + word[length-1]\n",
    "    lenght = length-1\n",
    "print(reverse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d2c7d310-63d4-45a5-9f6f-280ceb5cc8f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = int(input(\"enter number \"))\n",
    "for i in range(1,11):\n",
    "     print(i*n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f3befb-a24e-4f46-97ef-fc90cc11751d",
   "metadata": {},
   "outputs": [],
   "source": [
    "n = int(input(\"enter number \"))\n",
    "i = 1\n",
    "while i<=10:\n",
    "    result = i*n\n",
    "    print(result)\n",
    "    i =  i+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9aba8dcf-b0c9-431c-8f9e-244145b6169e",
   "metadata": {},
   "outputs": [],
   "source": [
    "i = 1\n",
    "n = 5\n",
    "while i<n:\n",
    "    print(i)\n",
    "    if i == 3:\n",
    "     break\n",
    "    i = i + 1\n",
    "else : \n",
    "     print(\"this will excute once your will complete it\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ea3da35-bfed-4d9b-bdd8-a737b895892f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
